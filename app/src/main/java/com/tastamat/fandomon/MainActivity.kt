package com.tastamat.fandomon

import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.tastamat.fandomon.data.DatabaseHelper
import com.tastamat.fandomon.utils.FandomatChecker
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.*
import android.widget.Switch
import com.tastamat.fandomon.data.EventType
import com.tastamat.fandomon.data.EventSeverity
import com.tastamat.fandomon.network.NetworkSender
import com.tastamat.fandomon.utils.FileLogger
import com.tastamat.fandomon.utils.FileWatcher
import com.tastamat.fandomon.utils.LogAnalyzer
import com.tastamat.fandomon.utils.FandomatLogMonitor

class MainActivity : AppCompatActivity() {

    companion object {
        private const val TAG = "MainActivity"
    }

    private lateinit var databaseHelper: DatabaseHelper
    private lateinit var fandomatChecker: FandomatChecker
    private lateinit var networkSender: NetworkSender
    private lateinit var fileLogger: FileLogger
    private lateinit var fileWatcher: FileWatcher
    private lateinit var logAnalyzer: LogAnalyzer
    private lateinit var fandomatLogMonitor: FandomatLogMonitor

    private lateinit var fandomatStatusText: TextView
    private lateinit var fandomonStatusText: TextView
    private lateinit var internetStatusText: TextView
    private lateinit var lastEventText: TextView
    private lateinit var systemInfoText: TextView
    private lateinit var eventStatsText: TextView
    private lateinit var serviceSwitch: Switch


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        initializeComponents()
        setupViews()

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        ensureMonitoringServiceStarted()

        updateStatus()
    }

    /**
     * –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω
     */
    private fun ensureMonitoringServiceStarted() {
        if (!isServiceRunning(FandomonMonitoringService::class.java)) {
            Log.i(TAG, "–°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            startMonitoringService()
        } else {
            Log.d(TAG, "–°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        }
    }

    private fun initializeComponents() {
        databaseHelper = DatabaseHelper(this)
        fandomatChecker = FandomatChecker(this)
        networkSender = NetworkSender(this)
        fileLogger = FileLogger(this)
        logAnalyzer = LogAnalyzer(this)
        fandomatLogMonitor = FandomatLogMonitor(this)

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FileWatcher
        initializeFileWatcher()

        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤
        fandomatLogMonitor.startMonitoring()
    }

    private fun setupViews() {
        fandomatStatusText = findViewById(R.id.fandomatStatusText)
        fandomonStatusText = findViewById(R.id.fandomonStatusText)
        internetStatusText = findViewById(R.id.internetStatusText)
        lastEventText = findViewById(R.id.lastEventText)
        systemInfoText = findViewById(R.id.systemInfoText)
        eventStatsText = findViewById(R.id.eventStatsText)
        serviceSwitch = findViewById(R.id.serviceSwitch)

        findViewById<Button>(R.id.startServiceButton).setOnClickListener {
            startMonitoringService()
        }

        findViewById<Button>(R.id.stopServiceButton).setOnClickListener {
            stopMonitoringService()
        }

        findViewById<Button>(R.id.viewLogsButton).setOnClickListener {
            openLogsActivity()
        }

        findViewById<Button>(R.id.fandomatLogsButton).setOnClickListener {
            openFandomatLogsActivity()
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ª–æ–≥–æ–≤
        findViewById<Button>(R.id.fandomatLogsButton).setOnLongClickListener {
            openLogPermissionActivity()
            true
        }

        findViewById<Button>(R.id.settingsButton).setOnClickListener {
            openSettingsActivity()
        }


        findViewById<Button>(R.id.testConnectionButton).setOnClickListener {
            testConnection()
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
        findViewById<Button>(R.id.testConnectionButton).setOnLongClickListener {
            createTestEvents()
            true
        }

        findViewById<Button>(R.id.testConnectionButton).setOnClickListener {
            testConnection()
        }



        serviceSwitch.setOnCheckedChangeListener { _, isChecked ->
            if (isChecked) {
                startMonitoringService()
            } else {
                stopMonitoringService()
            }
        }
    }

    private fun updateStatus() {
        lifecycleScope.launch {
            try {
                // –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                val serviceRunning = isServiceRunning(FandomonMonitoringService::class.java)
                fandomonStatusText.text = if (serviceRunning) {
                    "üü¢ Fandomon: –ê–∫—Ç–∏–≤–µ–Ω"
                } else {
                    "üî¥ Fandomon: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                }
                serviceSwitch.isChecked = serviceRunning

                // –°—Ç–∞—Ç—É—Å Fandomat
                val fandomatInstalled = fandomatChecker.isFandomatInstalled()
                val fandomatRunning = if (fandomatInstalled) fandomatChecker.isFandomatRunning() else false
                val fandomatVersion = fandomatChecker.getFandomatVersion()

                Log.d(TAG, "Fandomat —Å—Ç–∞—Ç—É—Å: installed=$fandomatInstalled, running=$fandomatRunning, version=$fandomatVersion")

                fandomatStatusText.text = when {
                    !fandomatInstalled -> "‚ùå Fandomat: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    fandomatRunning -> "üü¢ Fandomat: –ó–∞–ø—É—â–µ–Ω${if (fandomatVersion != null) " (v$fandomatVersion)" else ""}"
                    else -> "üî¥ Fandomat: –ù–µ –∑–∞–ø—É—â–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ Usage Stats)"
                }

                // –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
                val connectivityManager = getSystemService(android.content.Context.CONNECTIVITY_SERVICE) as android.net.ConnectivityManager
                val activeNetwork = connectivityManager.activeNetwork
                val networkCapabilities = connectivityManager.getNetworkCapabilities(activeNetwork)
                val isConnected = networkCapabilities?.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET) == true

                internetStatusText.text = if (isConnected) {
                    "üü¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: –ü–æ–¥–∫–ª—é—á–µ–Ω"
                } else {
                    "üî¥ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: –û—Ç–∫–ª—é—á–µ–Ω"
                }

                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
                val statistics = databaseHelper.getEventStatistics()
                eventStatsText.text = "üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: ${statistics.totalEvents} | –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${statistics.pendingEvents}"

                // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ
                val recentEvents = databaseHelper.getEventsBetween(
                    System.currentTimeMillis() - 24 * 60 * 60 * 1000L,
                    System.currentTimeMillis()
                )

                if (recentEvents.isNotEmpty()) {
                    val lastEvent = recentEvents.first()
                    val timeFormat = SimpleDateFormat("HH:mm", Locale.getDefault())
                    val eventTime = timeFormat.format(Date(lastEvent.timestamp))

                    lastEventText.text = "üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ: $eventTime - ${lastEvent.type.description}"
                } else {
                    lastEventText.text = "üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                }

                // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                val uptime = android.os.SystemClock.uptimeMillis() / 1000 / 60 // –≤ –º–∏–Ω—É—Ç–∞—Ö
                val batteryManager = getSystemService(android.content.Context.BATTERY_SERVICE) as android.os.BatteryManager
                val batteryLevel = batteryManager.getIntProperty(android.os.BatteryManager.BATTERY_PROPERTY_CAPACITY)

                systemInfoText.text = "üìä –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}–º | –ë–∞—Ç–∞—Ä–µ—è: ${batteryLevel}% | Android ${android.os.Build.VERSION.RELEASE}"

            } catch (e: Exception) {
                fandomonStatusText.text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
            }
        }
    }

    private fun startMonitoringService() {
        try {
            val serviceIntent = Intent(this, FandomonMonitoringService::class.java)
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
                startForegroundService(serviceIntent)
            } else {
                startService(serviceIntent)
            }
            updateStatus()
        } catch (e: Exception) {
            fandomonStatusText.text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"
        }
    }

    private fun stopMonitoringService() {
        try {
            val serviceIntent = Intent(this, FandomonMonitoringService::class.java)
            stopService(serviceIntent)
            updateStatus()
        } catch (e: Exception) {
            fandomonStatusText.text = "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞"
        }
    }

    private fun testConnection() {
        lifecycleScope.launch {
            try {
                systemInfoText.text = "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."

                val serverUrl = databaseHelper.getSetting("server_url")
                val mqttBroker = databaseHelper.getSetting("mqtt_broker")

                var results = mutableListOf<String>()

                // –¢–µ—Å—Ç–∏—Ä—É–µ–º REST API
                if (serverUrl.isNotEmpty()) {
                    networkSender.testConnection(serverUrl) { success, message ->
                        lifecycleScope.launch {
                            results.add("REST: ${if (success) "‚úÖ" else "‚ùå"} $message")
                            updateTestResults(results)
                        }
                    }
                } else {
                    results.add("REST: ‚ö†Ô∏è URL —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                }

                // –¢–µ—Å—Ç–∏—Ä—É–µ–º MQTT
                if (mqttBroker.isNotEmpty()) {
                    networkSender.testMqttConnection(mqttBroker) { success, message ->
                        lifecycleScope.launch {
                            results.add("MQTT: ${if (success) "‚úÖ" else "‚ùå"} $message")
                            updateTestResults(results)
                        }
                    }
                } else {
                    results.add("MQTT: ‚ö†Ô∏è –ë—Ä–æ–∫–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    updateTestResults(results)
                }

            } catch (e: Exception) {
                systemInfoText.text = "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${e.message}"
            }
        }
    }


    private fun updateTestResults(results: List<String>) {
        val resultText = if (results.size >= 2) {
            "üîç –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:\n${results.joinToString("\n")}"
        } else {
            "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ... (${results.size}/2)"
        }
        systemInfoText.text = resultText

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        if (results.size >= 2) {
            lifecycleScope.launch {
                kotlinx.coroutines.delay(5000)
                updateStatus()
            }
        }
    }

    private fun openLogsActivity() {
        val intent = Intent(this, LogsActivity::class.java)
        startActivity(intent)
    }

    private fun openFandomatLogsActivity() {
        val intent = Intent(this, FandomatLogsActivity::class.java)
        startActivity(intent)
    }

    private fun openSettingsActivity() {
        val intent = Intent(this, SettingsActivity::class.java)
        startActivity(intent)
    }

    private fun openLogPermissionActivity() {
        val intent = Intent(this, LogPermissionActivity::class.java)
        startActivity(intent)
    }

    private fun isServiceRunning(serviceClass: Class<*>): Boolean {
        val manager = getSystemService(ACTIVITY_SERVICE) as android.app.ActivityManager
        for (service in manager.getRunningServices(Integer.MAX_VALUE)) {
            if (serviceClass.name == service.service.className) {
                return true
            }
        }
        return false
    }

    override fun onResume() {
        super.onResume()
        updateStatus()
    }

    private fun createTestEvents() {
        lifecycleScope.launch {
            try {
                android.util.Log.d("MainActivity", "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π...")

                val currentTime = System.currentTimeMillis()
                val timeText = SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(Date(currentTime))

                databaseHelper.insertEvent(
                    EventType.FANDOMON_STARTED,
                    "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ $timeText",
                    EventSeverity.INFO
                )

                databaseHelper.insertEvent(
                    EventType.FANDOMAT_RESTARTED,
                    "Fandomat –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –≤ $timeText",
                    EventSeverity.WARNING
                )

                databaseHelper.insertEvent(
                    EventType.NETWORK_RESTORED,
                    "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ $timeText",
                    EventSeverity.INFO
                )

                databaseHelper.insertEvent(
                    EventType.POWER_CONNECTED,
                    "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ø–∏—Ç–∞–Ω–∏—é –≤ $timeText",
                    EventSeverity.INFO
                )

                databaseHelper.insertEvent(
                    EventType.FANDOMON_ERROR,
                    "–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ Fandomon –≤ $timeText",
                    EventSeverity.ERROR
                )

                val statistics = databaseHelper.getEventStatistics()
                android.util.Log.d("MainActivity", "–°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π. –í—Å–µ–≥–æ –≤ –ë–î: ${statistics.totalEvents}, –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö: ${statistics.pendingEvents}")

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
                updateStatus()

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Toast
                android.widget.Toast.makeText(this@MainActivity, "‚úÖ –°–æ–∑–¥–∞–Ω–æ 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π", android.widget.Toast.LENGTH_SHORT).show()

            } catch (e: Exception) {
                android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π", e)
                android.widget.Toast.makeText(this@MainActivity, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: ${e.message}", android.widget.Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun initializeFileWatcher() {
        try {
            val logFilePath = fileLogger.getLogFilePath()
            android.util.Log.d("MainActivity", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FileWatcher –¥–ª—è —Ñ–∞–π–ª–∞: $logFilePath")

            fileWatcher = FileWatcher(
                context = this,
                filePath = logFilePath,
                onFileChanged = { newLines ->
                    android.util.Log.d("MainActivity", "–ü–æ–ª—É—á–µ–Ω–æ ${newLines.size} –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤")
                    logAnalyzer.analyzeLogLines(newLines)
                },
                onFileInactive = {
                    android.util.Log.w("MainActivity", "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤")
                    logAnalyzer.handleLogInactivity()
                }
            )

            fileWatcher.startWatching()
            fileLogger.writeSystemEvent("FILE_WATCHER_STARTED", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ –∑–∞–ø—É—â–µ–Ω: $logFilePath")

        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FileWatcher", e)
        }
    }


    override fun onDestroy() {
        super.onDestroy()
        try {
            if (::fileWatcher.isInitialized) {
                fileWatcher.stopWatching()
            }
            if (::logAnalyzer.isInitialized) {
                logAnalyzer.cleanup()
            }
            if (::fandomatLogMonitor.isInitialized) {
                fandomatLogMonitor.cleanup()
            }
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤", e)
        }
    }
}