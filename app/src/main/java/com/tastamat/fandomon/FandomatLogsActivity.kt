package com.tastamat.fandomon

import android.os.Bundle
import android.widget.Button
import android.widget.TextView
import android.util.Log
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.tastamat.fandomon.utils.LogMonitor
import com.tastamat.fandomon.utils.FileLogger
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.*

class FandomatLogsActivity : AppCompatActivity() {

    private lateinit var logMonitor: LogMonitor
    private lateinit var fileLogger: FileLogger
    private lateinit var logsRecyclerView: RecyclerView
    private lateinit var logsAdapter: FandomatLogsAdapter
    private lateinit var statusText: TextView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_fandomat_logs)

        initializeComponents()
        setupViews()
        loadLogs()
    }

    private fun initializeComponents() {
        logMonitor = LogMonitor(this)
        fileLogger = FileLogger(this)
        logsAdapter = FandomatLogsAdapter()
    }

    private fun setupViews() {
        logsRecyclerView = findViewById(R.id.fandomatLogsRecyclerView)
        statusText = findViewById(R.id.logsStatusText)

        logsRecyclerView.layoutManager = LinearLayoutManager(this)
        logsRecyclerView.adapter = logsAdapter

        findViewById<Button>(R.id.backButton).setOnClickListener {
            finish()
        }

        findViewById<Button>(R.id.refreshLogsButton).setOnClickListener {
            loadLogs()
        }

        findViewById<Button>(R.id.clearLogsButton).setOnClickListener {
            clearLogs()
        }
    }

    private fun loadLogs() {
        lifecycleScope.launch {
            try {
                statusText.text = "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ Fandomat..."
                Log.d("FandomatLogsActivity", "–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤")

                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ª–æ–≥–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å
                val logFilePath = fileLogger.getLogFilePath()
                val logFileExists = fileLogger.logFileExists()
                val logFileSize = fileLogger.getLogFileSize()

                Log.d("FandomatLogsActivity", "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤: $logFilePath")
                Log.d("FandomatLogsActivity", "–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $logFileExists")
                Log.d("FandomatLogsActivity", "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: $logFileSize –±–∞–π—Ç")

                // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞
                val fileLogs = loadLogsFromFile()

                // –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤—ã—Ö –ª–æ–≥–æ–≤ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏
                val systemLogs = if (fileLogs.isEmpty()) {
                    Log.d("FandomatLogsActivity", "–§–∞–π–ª–æ–≤—ã—Ö –ª–æ–≥–æ–≤ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏")
                    logMonitor.getFandomatLogs()
                } else {
                    emptyList()
                }

                val allLogs = fileLogs + systemLogs
                Log.d("FandomatLogsActivity", "–ü–æ–ª—É—á–µ–Ω–æ –ª–æ–≥–æ–≤: —Ñ–∞–π–ª–æ–≤—ã—Ö=${fileLogs.size}, —Å–∏—Å—Ç–µ–º–Ω—ã—Ö=${systemLogs.size}")

                if (allLogs.isNotEmpty()) {
                    logsAdapter.updateLogs(allLogs)
                    statusText.text = "üìã –ù–∞–π–¥–µ–Ω–æ ${allLogs.size} –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤"
                } else {
                    logsAdapter.updateLogs(emptyList())
                    statusText.text = "‚ÑπÔ∏è –õ–æ–≥–∏ Fandomat –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                }

            } catch (e: Exception) {
                Log.e("FandomatLogsActivity", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤", e)
                statusText.text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: ${e.message}"
            }
        }
    }

    private fun loadLogsFromFile(): List<LogMonitor.LogEntry> {
        return try {
            val logFilePath = fileLogger.getLogFilePath()
            Log.d("FandomatLogsActivity", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ –ø–æ –ø—É—Ç–∏: $logFilePath")

            if (!fileLogger.logFileExists()) {
                Log.d("FandomatLogsActivity", "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ –ø—É—Ç–∏: $logFilePath")

                // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª —Ñ–∏–∑–∏—á–µ—Å–∫–∏
                val file = java.io.File(logFilePath)
                Log.d("FandomatLogsActivity", "–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏: ${file.exists()}")
                Log.d("FandomatLogsActivity", "–§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è: ${file.canRead()}")
                Log.d("FandomatLogsActivity", "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${file.length()} –±–∞–π—Ç")

                return emptyList()
            }

            val fileLines = fileLogger.readLastLogs(100) // –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
            Log.d("FandomatLogsActivity", "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞: ${fileLines.size}")

            // –í—ã–≤–µ–¥–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            fileLines.take(5).forEachIndexed { index, line ->
                Log.d("FandomatLogsActivity", "–°—Ç—Ä–æ–∫–∞ $index: $line")
            }

            val parsedLogs = fileLines.mapNotNull { line ->
                parseFileLogLine(line)
            }

            Log.d("FandomatLogsActivity", "–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${parsedLogs.size}")

            parsedLogs

        } catch (e: Exception) {
            Log.e("FandomatLogsActivity", "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤", e)
            emptyList()
        }
    }

    private fun parseFileLogLine(line: String): LogMonitor.LogEntry? {
        return try {
            // –§–æ—Ä–º–∞—Ç: "yyyy-MM-dd HH:mm:ss.SSS [LEVEL] TAG: MESSAGE"
            val pattern = Regex("""(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}) \[(\w+)\] ([^:]+): (.*)""")
            val match = pattern.find(line)

            if (match != null) {
                val timestampStr = match.groupValues[1]
                val level = match.groupValues[2]
                val tag = match.groupValues[3]
                val message = match.groupValues[4]

                val timestamp = try {
                    val format = SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS", Locale.getDefault())
                    format.parse(timestampStr)?.time ?: System.currentTimeMillis()
                } catch (e: Exception) {
                    System.currentTimeMillis()
                }

                LogMonitor.LogEntry(
                    timestamp = timestamp,
                    level = level,
                    tag = tag,
                    message = message,
                    rawLine = line
                )
            } else {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–ø–∏—Å—å
                LogMonitor.LogEntry(
                    timestamp = System.currentTimeMillis(),
                    level = "FILE",
                    tag = "Unparsed",
                    message = line,
                    rawLine = line
                )
            }
        } catch (e: Exception) {
            Log.w("FandomatLogsActivity", "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: $line", e)
            null
        }
    }

    private fun clearLogs() {
        logsAdapter.updateLogs(emptyList())
        statusText.text = "üóëÔ∏è –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    }

}

class FandomatLogsAdapter : RecyclerView.Adapter<FandomatLogsAdapter.LogViewHolder>() {

    private var logs = listOf<LogMonitor.LogEntry>()

    fun updateLogs(newLogs: List<LogMonitor.LogEntry>) {
        Log.d("FandomatLogsAdapter", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤: ${newLogs.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        logs = newLogs
        Log.d("FandomatLogsAdapter", "–í—ã–∑—ã–≤–∞–µ–º notifyDataSetChanged(), itemCount —Ç–µ–ø–µ—Ä—å: ${logs.size}")
        notifyDataSetChanged()
        Log.d("FandomatLogsAdapter", "notifyDataSetChanged() –∑–∞–≤–µ—Ä—à–µ–Ω")
    }

    override fun onCreateViewHolder(parent: android.view.ViewGroup, viewType: Int): LogViewHolder {
        Log.d("FandomatLogsAdapter", "–°–æ–∑–¥–∞–Ω–∏–µ ViewHolder")
        val view = android.view.LayoutInflater.from(parent.context)
            .inflate(R.layout.item_fandomat_log, parent, false)
        return LogViewHolder(view)
    }

    override fun onBindViewHolder(holder: LogViewHolder, position: Int) {
        Log.d("FandomatLogsAdapter", "–ü—Ä–∏–≤—è–∑–∫–∞ ViewHolder –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ $position –∏–∑ ${logs.size}")
        if (position < logs.size) {
            holder.bind(logs[position])
        }
    }

    override fun getItemCount(): Int = logs.size

    class LogViewHolder(itemView: android.view.View) : RecyclerView.ViewHolder(itemView) {
        private val timestampText: TextView = itemView.findViewById(R.id.logTimestampText)
        private val levelText: TextView = itemView.findViewById(R.id.logLevelText)
        private val messageText: TextView = itemView.findViewById(R.id.logMessageText)
        private val tagText: TextView = itemView.findViewById(R.id.logTagText)
        private val levelIndicator: android.view.View = itemView.findViewById(R.id.levelIndicator)

        fun bind(logEntry: LogMonitor.LogEntry) {
            val dateFormat = SimpleDateFormat("dd.MM HH:mm:ss", Locale.getDefault())
            timestampText.text = dateFormat.format(Date(logEntry.timestamp))

            levelText.text = logEntry.level
            messageText.text = logEntry.message
            tagText.text = logEntry.tag

            // –¶–≤–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∞
            val color = when (logEntry.level.uppercase()) {
                "E", "ERROR" -> android.graphics.Color.RED
                "W", "WARN" -> android.graphics.Color.parseColor("#FF9800")
                "I", "INFO" -> android.graphics.Color.parseColor("#4CAF50")
                "D", "DEBUG" -> android.graphics.Color.parseColor("#2196F3")
                "V", "VERBOSE" -> android.graphics.Color.GRAY
                else -> android.graphics.Color.BLACK
            }
            levelIndicator.setBackgroundColor(color)
        }
    }
}