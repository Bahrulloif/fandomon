package com.tastamat.fandomon

import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.Switch
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.tastamat.fandomon.data.DatabaseHelper
import com.tastamat.fandomon.network.NetworkSender
import kotlinx.coroutines.launch
import android.widget.TextView
import android.widget.Toast

class SettingsActivity : AppCompatActivity() {

    private lateinit var databaseHelper: DatabaseHelper
    private lateinit var networkSender: NetworkSender

    private lateinit var serverUrlEdit: EditText
    private lateinit var mqttBrokerEdit: EditText
    private lateinit var monitoringIntervalEdit: EditText
    private lateinit var statusSendIntervalEdit: EditText
    private lateinit var logRetentionEdit: EditText
    private lateinit var maxEventsPerBatchEdit: EditText
    private lateinit var deviceIdEdit: EditText
    private lateinit var deviceNameEdit: EditText
    private lateinit var inactivityTimeoutEdit: EditText
    private lateinit var autoRestartSwitch: Switch
    private lateinit var connectionStatusText: TextView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_settings)

        initializeComponents()
        setupViews()
        loadSettings()
    }

    private fun initializeComponents() {
        databaseHelper = DatabaseHelper(this)
        networkSender = NetworkSender(this)
    }

    private fun setupViews() {
        serverUrlEdit = findViewById(R.id.serverUrlEdit)
        mqttBrokerEdit = findViewById(R.id.mqttBrokerEdit)
        monitoringIntervalEdit = findViewById(R.id.monitoringIntervalEdit)
        statusSendIntervalEdit = findViewById(R.id.statusSendIntervalEdit)
        logRetentionEdit = findViewById(R.id.logRetentionEdit)
        maxEventsPerBatchEdit = findViewById(R.id.maxEventsPerBatchEdit)
        deviceIdEdit = findViewById(R.id.deviceIdEdit)
        deviceNameEdit = findViewById(R.id.deviceNameEdit)
        inactivityTimeoutEdit = findViewById(R.id.inactivityTimeoutEdit)
        autoRestartSwitch = findViewById(R.id.autoRestartSwitch)
        connectionStatusText = findViewById(R.id.connectionStatusText)

        findViewById<Button>(R.id.saveButton).setOnClickListener {
            saveSettings()
        }

        findViewById<Button>(R.id.backButton).setOnClickListener {
            finish()
        }

        findViewById<Button>(R.id.testRestButton).setOnClickListener {
            testRestConnection()
        }

        findViewById<Button>(R.id.testMqttButton).setOnClickListener {
            testMqttConnection()
        }

        findViewById<Button>(R.id.resetSettingsButton).setOnClickListener {
            resetToDefaults()
        }

        findViewById<Button>(R.id.exportSettingsButton).setOnClickListener {
            exportSettings()
        }
    }

    private fun loadSettings() {
        lifecycleScope.launch {
            try {
                serverUrlEdit.setText(databaseHelper.getSetting("server_url"))
                mqttBrokerEdit.setText(databaseHelper.getSetting("mqtt_broker"))
                monitoringIntervalEdit.setText(databaseHelper.getSetting("monitoring_interval", "30"))
                statusSendIntervalEdit.setText(databaseHelper.getSetting("status_send_interval", "300"))
                logRetentionEdit.setText(databaseHelper.getSetting("log_retention_days", "7"))
                maxEventsPerBatchEdit.setText(databaseHelper.getSetting("max_events_per_batch", "100"))

                // –ó–∞–≥—Ä—É–∂–∞–µ–º device_id (–µ—Å–ª–∏ –ø—É—Å—Ç–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ)
                val savedDeviceId = databaseHelper.getSetting("device_id", "")
                if (savedDeviceId.isEmpty()) {
                    val autoDeviceId = android.provider.Settings.Secure.getString(contentResolver, android.provider.Settings.Secure.ANDROID_ID)
                    deviceIdEdit.hint = "–ê–≤—Ç–æ: $autoDeviceId"
                    deviceIdEdit.setText("")
                } else {
                    deviceIdEdit.setText(savedDeviceId)
                }

                deviceNameEdit.setText(databaseHelper.getSetting("device_name", android.os.Build.MODEL))
                inactivityTimeoutEdit.setText(databaseHelper.getSetting("inactivity_timeout_minutes", "5"))
                autoRestartSwitch.isChecked = databaseHelper.getSetting("auto_restart_fandomat", "true") == "true"
            } catch (e: Exception) {
                Toast.makeText(this@SettingsActivity, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun saveSettings() {
        lifecycleScope.launch {
            try {
                // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                val monitoringInterval = monitoringIntervalEdit.text.toString().toIntOrNull()
                val statusSendInterval = statusSendIntervalEdit.text.toString().toIntOrNull()
                val logRetention = logRetentionEdit.text.toString().toIntOrNull()
                val maxEvents = maxEventsPerBatchEdit.text.toString().toIntOrNull()
                val inactivityTimeout = inactivityTimeoutEdit.text.toString().toIntOrNull()

                if (monitoringInterval == null || monitoringInterval < 10) {
                    Toast.makeText(this@SettingsActivity, "–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 10 —Å–µ–∫", Toast.LENGTH_SHORT).show()
                    return@launch
                }

                if (statusSendInterval == null || statusSendInterval < 60) {
                    Toast.makeText(this@SettingsActivity, "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 60 —Å–µ–∫", Toast.LENGTH_SHORT).show()
                    return@launch
                }

                if (inactivityTimeout == null || inactivityTimeout < 1) {
                    Toast.makeText(this@SettingsActivity, "–í—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 1 –º–∏–Ω", Toast.LENGTH_SHORT).show()
                    return@launch
                }

                databaseHelper.saveSetting("server_url", serverUrlEdit.text.toString().trim())
                databaseHelper.saveSetting("mqtt_broker", mqttBrokerEdit.text.toString().trim())
                databaseHelper.saveSetting("monitoring_interval", monitoringInterval.toString())
                databaseHelper.saveSetting("status_send_interval", statusSendInterval.toString())
                databaseHelper.saveSetting("log_retention_days", logRetention?.toString() ?: "7")
                databaseHelper.saveSetting("max_events_per_batch", maxEvents?.toString() ?: "100")

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º device_id (–µ—Å–ª–∏ –ø—É—Å—Ç–æ–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ)
                val deviceIdText = deviceIdEdit.text.toString().trim()
                databaseHelper.saveSetting("device_id", deviceIdText)

                databaseHelper.saveSetting("device_name", deviceNameEdit.text.toString().trim())
                databaseHelper.saveSetting("inactivity_timeout_minutes", inactivityTimeout.toString())
                databaseHelper.saveSetting("auto_restart_fandomat", if (autoRestartSwitch.isChecked) "true" else "false")

                Toast.makeText(this@SettingsActivity, "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", Toast.LENGTH_SHORT).show()
            } catch (e: Exception) {
                Toast.makeText(this@SettingsActivity, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun testRestConnection() {
        lifecycleScope.launch {
            try {
                val serverUrl = serverUrlEdit.text.toString().trim()
                if (serverUrl.isEmpty()) {
                    Toast.makeText(this@SettingsActivity, "–í–≤–µ–¥–∏—Ç–µ URL —Å–µ—Ä–≤–µ—Ä–∞", Toast.LENGTH_SHORT).show()
                    return@launch
                }

                connectionStatusText.text = "üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ REST —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."

                networkSender.testConnection(serverUrl) { success, message ->
                    runOnUiThread {
                        connectionStatusText.text = if (success) {
                            "‚úÖ REST: $message"
                        } else {
                            "‚ùå REST: $message"
                        }
                    }
                }

            } catch (e: Exception) {
                connectionStatusText.text = "‚ùå REST: –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ - ${e.message}"
            }
        }
    }

    private fun testMqttConnection() {
        lifecycleScope.launch {
            try {
                val mqttBroker = mqttBrokerEdit.text.toString().trim()
                if (mqttBroker.isEmpty()) {
                    Toast.makeText(this@SettingsActivity, "–í–≤–µ–¥–∏—Ç–µ MQTT –±—Ä–æ–∫–µ—Ä", Toast.LENGTH_SHORT).show()
                    return@launch
                }

                connectionStatusText.text = "üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."

                networkSender.testMqttConnection(mqttBroker) { success, message ->
                    runOnUiThread {
                        connectionStatusText.text = if (success) {
                            "‚úÖ MQTT: $message"
                        } else {
                            "‚ùå MQTT: $message"
                        }
                    }
                }

            } catch (e: Exception) {
                connectionStatusText.text = "‚ùå MQTT: –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ - ${e.message}"
            }
        }
    }

    private fun resetToDefaults() {
        serverUrlEdit.setText("")
        mqttBrokerEdit.setText("")
        monitoringIntervalEdit.setText("30")
        statusSendIntervalEdit.setText("300")
        logRetentionEdit.setText("7")
        maxEventsPerBatchEdit.setText("100")

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º device_id –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É
        deviceIdEdit.setText("")
        val autoDeviceId = android.provider.Settings.Secure.getString(contentResolver, android.provider.Settings.Secure.ANDROID_ID)
        deviceIdEdit.hint = "–ê–≤—Ç–æ: $autoDeviceId"

        deviceNameEdit.setText(android.os.Build.MODEL)
        inactivityTimeoutEdit.setText("5")
        autoRestartSwitch.isChecked = true
        connectionStatusText.text = "‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        Toast.makeText(this, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã", Toast.LENGTH_SHORT).show()
    }

    private fun exportSettings() {
        lifecycleScope.launch {
            try {
                val settings = databaseHelper.getAllSettings()
                val settingsText = settings.map { "${it.key} = ${it.value}" }.joinToString("\n")

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –¥–∏–∞–ª–æ–≥–µ –∏–ª–∏ –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä
                val clipboard = getSystemService(android.content.Context.CLIPBOARD_SERVICE) as android.content.ClipboardManager
                val clip = android.content.ClipData.newPlainText("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Fandomon", settingsText)
                clipboard.setPrimaryClip(clip)

                Toast.makeText(this@SettingsActivity, "üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", Toast.LENGTH_SHORT).show()

            } catch (e: Exception) {
                Toast.makeText(this@SettingsActivity, "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${e.message}", Toast.LENGTH_SHORT).show()
            }
        }
    }
}