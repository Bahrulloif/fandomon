package com.tastamat.fandomon

import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.provider.Settings
import android.util.Log
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.tastamat.fandomon.utils.LogMonitor
import kotlinx.coroutines.launch

class LogPermissionActivity : AppCompatActivity() {

    private lateinit var logMonitor: LogMonitor
    private lateinit var statusText: TextView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_log_permission)

        logMonitor = LogMonitor(this)
        setupViews()
        checkPermissions()
    }

    private fun setupViews() {
        statusText = findViewById(R.id.permissionStatusText)

        findViewById<Button>(R.id.checkPermissionsButton).setOnClickListener {
            checkPermissions()
        }

        findViewById<Button>(R.id.requestPermissionsButton).setOnClickListener {
            requestLogPermissions()
        }

        findViewById<Button>(R.id.testLogcatButton).setOnClickListener {
            testLogcatAccess()
        }

        findViewById<Button>(R.id.testFandomatLogsButton).setOnClickListener {
            testFandomatLogs()
        }

        findViewById<Button>(R.id.backButton).setOnClickListener {
            finish()
        }
    }

    private fun checkPermissions() {
        val sb = StringBuilder()
        sb.append("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:\n\n")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ READ_LOGS
        val hasReadLogs = checkSelfPermission(android.Manifest.permission.READ_LOGS) == PackageManager.PERMISSION_GRANTED
        sb.append("üìã READ_LOGS: ${if (hasReadLogs) "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ" else "‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ"}\n")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å logcat
        val logcatAvailable = logMonitor.isLogcatAvailable()
        sb.append("üñ•Ô∏è Logcat –¥–æ—Å—Ç—É–ø–µ–Ω: ${if (logcatAvailable) "‚úÖ –î–∞" else "‚ùå –ù–µ—Ç"}\n")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ Fandomat
        val fandomatRunning = isFandomatRunning()
        sb.append("üì± Fandomat –∑–∞–ø—É—â–µ–Ω: ${if (fandomatRunning) "‚úÖ –î–∞" else "‚ùå –ù–µ—Ç"}\n")

        sb.append("\nüí° –°—Ç–∞—Ç—É—Å: ")
        when {
            !hasReadLogs -> sb.append("‚ùå –ù—É–∂–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            !logcatAvailable -> sb.append("‚ö†Ô∏è Logcat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            !fandomatRunning -> sb.append("‚ö†Ô∏è Fandomat –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            else -> sb.append("‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤")
        }

        statusText.text = sb.toString()
    }

    private fun requestLogPermissions() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        AlertDialog.Builder(this)
            .setTitle("üìã –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–æ–≤")
            .setMessage("""
                –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ Fandomat –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:

                1. –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:
                   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –û —Ç–µ–ª–µ—Ñ–æ–Ω–µ
                   ‚Ä¢ –ù–∞–∂–∞—Ç—å 7 —Ä–∞–∑ –Ω–∞ "–ù–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏"

                2. –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É –ø–æ USB:
                   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                   ‚Ä¢ –í–∫–ª—é—á–∏—Ç—å "–û—Ç–ª–∞–¥–∫–∞ –ø–æ USB"

                3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ ADB:
                   adb shell pm grant com.tastamat.fandomon android.permission.READ_LOGS

                –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞?
            """.trimIndent())
            .setPositiveButton("–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏") { _, _ ->
                openDeveloperSettings()
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }

    private fun openDeveloperSettings() {
        try {
            val intent = Intent(Settings.ACTION_APPLICATION_DEVELOPMENT_SETTINGS)
            startActivity(intent)
        } catch (e: Exception) {
            // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            val intent = Intent(Settings.ACTION_SETTINGS)
            startActivity(intent)
            Toast.makeText(this, "–ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö", Toast.LENGTH_LONG).show()
        }
    }

    private fun testLogcatAccess() {
        lifecycleScope.launch {
            try {
                statusText.text = "üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ logcat..."

                val available = logMonitor.isLogcatAvailable()
                if (available) {
                    statusText.text = "‚úÖ Logcat –¥–æ—Å—Ç—É–ø–µ–Ω!\n\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤..."

                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
                    val logs = logMonitor.getLastNLogs("com.tastamat.fandomon", 10)

                    if (logs.isNotEmpty()) {
                        statusText.text = "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${logs.size} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤!\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n" +
                            logs.take(3).joinToString("\n") { it.take(100) + "..." }
                    } else {
                        statusText.text = "‚ö†Ô∏è Logcat –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ª–æ–≥–∏ Fandomon –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ."
                    }
                } else {
                    statusText.text = "‚ùå Logcat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è."
                }

            } catch (e: Exception) {
                statusText.text = "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${e.message}"
                Log.e("LogPermissionActivity", "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è logcat", e)
            }
        }
    }

    private fun testFandomatLogs() {
        lifecycleScope.launch {
            try {
                statusText.text = "üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ Fandomat..."

                val logs = logMonitor.getFandomatLogs()

                if (logs.isNotEmpty()) {
                    val sb = StringBuilder()
                    sb.append("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${logs.size} –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤ Fandomat!\n\n")
                    sb.append("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:\n")

                    logs.take(5).forEach { log ->
                        sb.append("${log.level} ${log.tag}: ${log.message.take(50)}...\n")
                    }

                    statusText.text = sb.toString()
                } else {
                    statusText.text = "‚ö†Ô∏è –õ–æ–≥–∏ Fandomat –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n" +
                        "‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Fandomat –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ\n" +
                        "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π\n" +
                        "‚Ä¢ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã"
                }

            } catch (e: Exception) {
                statusText.text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ Fandomat: ${e.message}"
                Log.e("LogPermissionActivity", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ Fandomat", e)
            }
        }
    }

    private fun isFandomatRunning(): Boolean {
        return try {
            val process = Runtime.getRuntime().exec("pidof com.tastamat.fandomat")
            val result = process.waitFor()
            process.destroy()
            result == 0
        } catch (e: Exception) {
            false
        }
    }
}